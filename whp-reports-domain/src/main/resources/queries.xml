<query-definitions>
    <named-queries>
        <named-query name="flashing.calls.per.day">
            <query><![CDATA[
                    select count(1) as no_of_calls, CAST(call_Time AS DATE) as call_date
                        from whp_reports.flashing_log group by call_date
                            order by call_date desc limit 100
            ]]></query>
        </named-query>
        <named-query name="flashing.calls.per.dayofweek">
            <query><![CDATA[
                    SELECT EXTRACT(DOW FROM call_time) as day_of_week, count(1) as no_of_calls from whp_reports.flashing_log where age(call_time) < '12 mons' group by day_of_week order by day_of_week
            ]]></query>
        </named-query>
        <named-query name="adherence.calls.per.week">
            <query><![CDATA[
                    select count(1) as no_of_calls, EXTRACT(WEEK FROM start_date ) as week_of_year from whp_reports.adherence_call_log group by week_of_year order by week_of_year
            ]]></query>
        </named-query>
        <named-query name="adherence.captured.per.week">
            <query><![CDATA[
                    select sum(adherence_captured_count) as total_adherence, EXTRACT(WEEK FROM start_date ) as week_of_year from whp_reports.adherence_call_log group by week_of_year order by week_of_year
            ]]></query>
        </named-query>
        <named-query name="adherence.count.input.types">
            <query><![CDATA[
                    select count(1) input_count, status from whp_reports.patient_adherence_submission group by status
            ]]></query>
        </named-query>
        <named-query name="adherence.call.status">
            <query><![CDATA[
                    select count(1) status_count, call_status from whp_reports.adherence_call_log group by call_status
            ]]></query>
        </named-query>
        <named-query name="flashing.calls.by.provider">
            <query><![CDATA[
                    SELECT count(1) num_of_calls, provider_id from whp_reports.flashing_log group by provider_id order by num_of_calls desc
            ]]></query>
        </named-query>
        <named-query name="providerReminders.adherenceGivenAfterReminder">
            <query><![CDATA[
                    select count(1) as no_of_providers, CAST(attempt_date_time AS DATE) as call_date from whp_reports.provider_reminder_call_log  where adherence_reported = 'Y' and age(attempt_date_time) < '1 mons' group by call_date  order by call_date
            ]]></query>
        </named-query>
        <named-query name="providerReminders.allCalls">
            <query><![CDATA[
                    select count(1) as no_of_calls, CAST(attempt_date_time AS DATE) as attempt_date from whp_reports.provider_reminder_call_log where age(attempt_date_time) < '1 mons'  group by attempt_date  order by attempt_date
            ]]></query>
        </named-query>
        <named-query name="providerReminders.status.didNotReach">
            <query><![CDATA[
                    select count(1) as no_of_calls, CAST(attempt_date_time AS DATE) as attempt_date from whp_reports.provider_reminder_call_log  where disconnection_type= 'NETWORK_ERROR' and attempt  = 3  and age(attempt_date_time) < '1 mons' group by attempt_date  order by attempt_date
            ]]></query>
        </named-query>
        <named-query name="providerReminders.status.callComplete">
            <query><![CDATA[
                    select count(1) as no_of_calls, CAST(attempt_date_time AS DATE) as attempt_date from whp_reports.provider_reminder_call_log  where disconnection_type= 'CALL_COMPLETE'  and age(attempt_date_time) < '1 mons' group by attempt_date  order by attempt_date
            ]]></query>
        </named-query>
        <named-query name="providerReminders.status.providerHungUp">
            <query><![CDATA[
                select count(1) as no_of_calls, CAST(attempt_date_time AS DATE) as attempt_date from whp_reports.provider_reminder_call_log  where disconnection_type= 'PROVIDER_HUNGUP'  and age(attempt_date_time) < '1 mons' group by attempt_date  order by attempt_date
            ]]></query>
        </named-query>
        <named-query name="providerReminders.status.networkError">
            <query><![CDATA[
                select count(1) as no_of_calls, CAST(attempt_date_time AS DATE) as attempt_date from whp_reports.provider_reminder_call_log  where disconnection_type= 'NETWORK_ERROR'  and age(attempt_date_time) < '1 mons' group by attempt_date  order by attempt_date
            ]]></query>
        </named-query>
        <named-query name="providerReminders.status.didNotAnswer">
            <query><![CDATA[
                select count(1) as no_of_calls, CAST(attempt_date_time AS DATE) as attempt_date from whp_reports.provider_reminder_call_log  where disconnection_type= 'DID_NOT_ANSWER'  and age(attempt_date_time) < '1 mons' group by attempt_date  order by attempt_date
            ]]></query>
        </named-query>
        <named-query name="patient.ivrAlerts.effectiveness">
            <query><![CDATA[
                select count(distinct cl.custom_data -> 'patientId') as patient_with_ivr_calls,
                count(distinct patient_id) as patients_with_adherence_given,
                cast(date_trunc('week', attempt_date_time::timestamp) + '6 days'::interval AS DATE) as call_week_end_date
                from whp_reports.call_log cl left outer join whp_reports.adherence_record ar
                on ar.patient_id = cl.custom_data -> 'patientId'
                and date_trunc('week', ar.pill_date::timestamp) + '6 days'::interval = date_trunc('week', attempt_date_time::timestamp) + '6 days'::interval
                and ar.pill_status = 'Taken'
                where age(attempt_date_time) < '3 mons'
                group by call_week_end_date order by call_week_end_date
            ]]></query>
        </named-query>
        <named-query name="containerReport">
            <query><![CDATA[
                   SELECT  container_id, date_issued_on, provider_id, submitter_id, registration_instance,
                   channel_id, call_id, smear_test_date1 as smear_test_date_1, smear_test_result1 as smear_test_result_1,
                   smear_test_date2 as smear_test_date_2, smear_test_result2 as smear_test_result_2, lab_name, lab_number,
                   lab_results_captured_on, container_status as status, rc.text as reason_for_closure, diagnosis,
                   alternate_diagnosis_code, ad.text as alternate_diagnosis_name, closure_date, patient_id, tb_id,
                   consultation_date, mapping_instance, provider_district, given_patient_id, given_patient_name,
                   given_patient_age, given_gender
                   FROM whp_reports.sputum_tracking st
                   left outer join whp_reports.alternate_diagnosis ad on st.alternate_diagnosis_code =  ad.code
                   left outer join  whp_reports.reasons_for_closure rc on st.reason_for_closure = rc.code
                   where provider_district != 'TestDistrict'
                   #chunk($district) and provider_district = :district #end
                   #chunk($from_date) and st.date_issued_on >= :from_date #end
                   #chunk($to_date) and st.date_issued_on <= :to_date #end
                   order by st.date_issued_on DESC limit 65000
            ]]></query>
        </named-query>
        <named-query name="patientAlertCallLog">
            <query><![CDATA[
                  select c.call_id as call_id, c.custom_data -> 'patient_id' as patient_id, d.provider_id as provider_id,
                  d.provider_district as provider_district, c.start_date_time as call_start_time,
                  extract ('epoch' from (c.end_date_time - c.start_date_time)::interval) as duration,
                  c.attempt_date_time as call_attempt_time,
                  trim(to_char(c.attempt_date_time, 'Day')) as alert_day,
                  CASE
                    WHEN c.call_events -> 'tb_acknowledgement' = '1' THEN 'YES'
                    WHEN c.call_events -> 'tb_acknowledgement' = '2' THEN 'NO'
                  END AS alert_listened,
                  c.disposition as disconnection_type,
                  c.error_message as error_message,
                  c.attempt_number as call_attempt_number, c.custom_data -> 'adherence_missing_weeks' as adherence_missing_weeks
                   from whp_reports.call_log c LEFT OUTER JOIN
				   (select  p.patient_id, pt.provider_id, pt.provider_district, pt.start_date, pt.end_date
				   FROM whp_reports.patient p, whp_reports.patient_therapy pth, whp_reports.patient_treatment pt
				   where p.patient_pk = pth.patient_fk and pth.therapy_pk = pt.therapy_fk ) as d
                   on c.custom_data -> 'patient_id' = d.patient_id
                   and
                   CASE
                    WHEN d.end_date is not null THEN c.attempt_date_time between d.start_date and d.end_date
		            ELSE c.attempt_date_time >= d.start_date
		           END
                   order by call_attempt_time DESC limit 65000
                   ]]>
            </query>
        </named-query>
        <named-query name="number.of.tb.registrations">
            <query><![CDATA[
                select count(distinct tb_id) as tb_registration_count from whp_reports.patient_treatment
                #chain('AND' 'WHERE')
                    #chunk($district) provider_district = :district #end
                    #chunk($from_date) start_date >= :from_date #end
                    #chunk($to_date) start_date <= :to_date #end
                #end
            ]]></query>
        </named-query>
        <named-query name="number.of.tb.registrations.by.district">
            <query><![CDATA[
                select district.name as district,
                (select count(distinct tb_id) from whp_reports.patient_treatment
                    where provider_district = district.name
                    #chunk($from_date) and start_date >= :from_date #end
                    #chunk($to_date) and start_date <= :to_date #end
                ) as tb_registration_count
                from whp_reports.district
                order by district.name
            ]]></query>
        </named-query>
        <named-query name="number.of.providers.by.district">
            <query><![CDATA[
                select d.name as district,
                (select count(distinct provider_id)
	            from whp_reports.patient_treatment as pt where d.name = pt.provider_district
	            #chunk($from_date) and start_date >= :from_date #end
	            #chunk($to_date) and start_date <= :to_date #end) as provider_count
                FROM whp_reports.district as d
                order by d.name
            ]]></query>
        </named-query>
        <named-query name="number.of.tb.registrations.by.outcome">
            <query><![CDATA[
                select treatment_outcome.name as outcome,
                (select count(distinct tb_id) as tb_registration_count from whp_reports.patient_treatment
                    where patient_treatment.treatment_outcome = treatment_outcome.name  and end_date is not null
                    #chunk($district) and provider_district = :district #end
                    #chunk($from_date) and end_date >= :from_date #end
                    #chunk($to_date) and end_date <= :to_date #end ) as tb_registration_count
                from  whp_reports.treatment_outcome  order by treatment_outcome
            ]]></query>
        </named-query>
        <named-query name="number.of.container.registrations">
            <query><![CDATA[
                select count(container_id) as container_registration_count from whp_reports.sputum_tracking
                #chain('AND' 'WHERE')
                    #chunk($district) provider_district = :district #end
                    #chunk($from_date) date_issued_on >= :from_date #end
                    #chunk($to_date) date_issued_on <= :to_date #end
                #end
            ]]></query>
        </named-query>
        <named-query name="number.of.container.registrations.by.status">
            <query><![CDATA[
                select
                    sum(case when container_status = 'Open' then 1 else 0 end) as active,
                    sum(case when container_status = 'Closed' then 1 else 0 end) as closed,
                    sum(case when lab_results_captured_on is null then 1 else 0 end) as lab_results_pending,
                    sum(case when (consultation_date is null and registration_instance = 'PreTreatment' and (mapping_instance is null OR mapping_instance = 'PreTreatment')) then 1 else 0 end) as consultation_pending
                    from whp_reports.sputum_tracking
                    #chain('AND' 'WHERE')
                        #chunk($district) provider_district = :district #end
                        #chunk($from_date) date_issued_on >= :from_date #end
                        #chunk($to_date) date_issued_on <= :to_date #end
                    #end
            ]]></query>
        </named-query>
        <named-query name="number.of.container.registrations.by.district">
            <query><![CDATA[
                select d.name as district,
                coalesce(sum(case when container_status = 'Open' then 1 else 0 end), 0) as active,
                coalesce(sum(case when container_status = 'Closed' then 1 else 0 end), 0) as closed
                from whp_reports.district d left outer join whp_reports.sputum_tracking st on  st.provider_district = d.name
                    #chunk($from_date) AND date_issued_on >= :from_date #end
                    #chunk($to_date) AND date_issued_on <= :to_date #end
                group by d.name order by d.name
            ]]></query>
        </named-query>
        <named-query name="provider.performance.by.district">
            <query><![CDATA[
                SELECT district,
                       sum(CASE WHEN adherence_missing_weeks = 0 THEN 1 ELSE 0 END) AS zero_week_bucket,
                       sum(CASE WHEN adherence_missing_weeks BETWEEN 1 AND 2 THEN 1 ELSE 0 END) AS two_week_bucket,
                       sum(CASE WHEN adherence_missing_weeks BETWEEN 3 AND 5 THEN 1 ELSE 0 END) AS three_to_five_week_bucket,
                       sum(CASE WHEN adherence_missing_weeks BETWEEN 6 AND 8 THEN 1 ELSE 0 END) AS six_to_eight_week_bucket
                FROM
                  (SELECT weekly_stats.district,
                          provider_id,
                          sum(patient_exists) - sum(adherence_given) AS adherence_missing_weeks
                   FROM
                     ( SELECT provider_id,
                              district,
                              treatment_dates.week_date,
                              CASE WHEN EXISTS
                                (SELECT 1
                                 FROM whp_reports.adherence_audit_log
                                 WHERE provider.provider_id = adherence_audit_log.user_id
                                   AND adherence_audit_log.creation_time - interval '6 days' BETWEEN treatment_dates.week_date AND treatment_dates.week_date + interval '6 days')
                            THEN 1 ELSE 0 END AS adherence_given,
                                                                                                                                                                                               CASE WHEN EXISTS
                                (SELECT 1
                                 FROM whp_reports.patient_therapy all_therapy
                                 INNER JOIN whp_reports.patient_treatment all_treatment ON all_treatment.therapy_fk = all_therapy.therapy_pk
                                 WHERE all_treatment.provider_id = provider.provider_id
                                   AND ((all_therapy.start_date >= all_treatment.start_date
                                         AND all_therapy.start_date <= treatment_dates.week_date + interval '6 days')
                                        OR (all_therapy.start_date < all_treatment.start_date
                                            AND all_treatment.start_date <= treatment_dates.week_date + interval '6 days'))
                                   AND (all_therapy.close_date IS NULL
                                        OR all_therapy.close_date >= treatment_dates.week_date + interval '6 days')
                                   AND (all_treatment.end_date IS NULL
                                        OR all_treatment.end_date >= treatment_dates.week_date + interval '6 days'))
                            THEN 1 ELSE 0 END AS patient_exists
                            FROM treatment_dates, whp_reports.provider
                            where exists (select 1 FROM whp_reports.patient_therapy therapy
                                 INNER JOIN whp_reports.patient_treatment treatment ON treatment.therapy_fk = therapy.therapy_pk
                                 where treatment.provider_id = provider.provider_id and therapy.start_date is not null)
                            GROUP BY provider_id,
                                     district,
                                     treatment_dates.week_date,
                                     adherence_given,
                                     patient_exists
                            ORDER BY district,
                               provider_id,
                               treatment_dates.week_date ) AS weekly_stats
                            GROUP BY provider_id, district
                            ORDER BY district) AS week_count
                   GROUP BY district
            ]]></query>
        </named-query>
        <named-query name="whp.reports.stats">
            <query><![CDATA[
                select count(distinct provider_id) as count, 'active_providers' as subject  from whp_reports.patient
                inner join whp_reports.patient_therapy on patient_fk=  patient_pk
                inner join whp_reports.patient_treatment treatment on therapy_fk= therapy_pk where
                is_active = 'Y' and treatment.is_current_treatment = 'Y'
                union
                select count(1) as count, 'active_patients' as subject  from whp_reports.patient
                where is_active = 'Y'
                union
                select count(1) as count, 'all_patients' as subject  from whp_reports.patient
                union
                select count(distinct provider_id) as count, 'active_tpc_providers' as subject  from whp_reports.patient
                inner join whp_reports.patient_therapy on patient_fk=  patient_pk
                inner join whp_reports.patient_treatment treatment on therapy_fk= therapy_pk where
                is_active = 'Y' and treatment.is_current_treatment = 'Y' and provider_type = 'TPC'
                union
                select count(distinct provider_id) as count, 'active_rhp_providers' as subject  from whp_reports.patient
                inner join whp_reports.patient_therapy on patient_fk=  patient_pk
                inner join whp_reports.patient_treatment treatment on therapy_fk= therapy_pk where
                is_active = 'Y' and treatment.is_current_treatment = 'Y' and provider_type = 'RHP'
            ]]></query>
        </named-query>
    </named-queries>
</query-definitions>